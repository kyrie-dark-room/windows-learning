#pragma once
/*
// C++标准一方面对库类型所提供的操作做了详细规定，另一方面也对库的实现者做出一些性能上的需求。因此，
   标准库类型对于一般应用场合来说有足够的效率。

------------------------------------------------------------------------------------------------------
										初始化string对象的方式
------------------------------------------------------------------------------------------------------
	1) string s1					默认初始化，s1是一个空串
	2) string s2(s1)				s2是s1的副本
	3) string s2 = s1				等价于s2(s1)，s2是s1的副本
	4) string s3("value")			s3是字面值"value"的副本，除了字面值最后的那个空字符串外
	5) string s3 = "value"          等价于s3("value")，s3是字面值"value"的副本
	6) string s4(n, 'c')			把s4初始化为由连续n个字符c组成的串
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
										cctype头文件中的函数
------------------------------------------------------------------------------------------------------
	1) isalnum(c)					当c是字母或数字时为真
	2) isalpha(c)				    当c是字母时为真
	3) iscntrl(c)				    当c是控制字符时为真
	4) isdigit(c)					当c是数字时为真
	5) isgraph(c)					当c不是空格但可打印时为真
	6) islower(c)					当c是小写字母时为真
	7) isprint(c)					当c是可打印字符时为真（即c是空格或c具有可视形式）
	8) ispunct(c)				    当c是标点符号时为真（即c不是控制字符、数字、字母、可打印空白中的一种）
	9) isspace(c)				    当c是空白时为真（即c是空格、横向制表符、纵向制表符、回车符、换行符、进纸符中的一种）
	10) isupper(c)					当c是大写字母时为真
	11) isxdigit(c)					当c是十六进制数字时为真
	12) tolower(c)					如果c是大写字母，输出对应的小写字母；否则原样输出c
	13) toupper(c)					如果c是小写字母，输出对应的大写字母；否则原样输出c
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
										初始化vector对象的方式
------------------------------------------------------------------------------------------------------
	1) vector<T> v1					v1是一个空vector，它潜在的元素是T类型的，执行默认初始化
	2) vector<T> v2(v1)				v2中包含有v1所有元素的副本
	3) vector<T> v2 = v1			等价于v2(v1)，v2中包含有v1所有元素的副本
	4) vector<T> v3(n, val)			v3包含了n个重复的元素，每个元素的值都是val
	5) vector<T> v4(n) = "value"    v4包含了n个重复地执行了值初始化的对象
	6) vector<T> v5{a,b,c...}		v5包含了初始值个数的元素，每个元素被赋予相应的初始值
	7) vector<T> v5={a,b,c...}		等价于v5{a,b,c...}
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
								 获取数组第一个和最后一个元素后面指针的方法(C++ 11)
------------------------------------------------------------------------------------------------------
	int ia[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
	int *beg = begin(ia);      // 指向ia首元素的指针
	int *last = end(ia);       // 指向arr尾元素的下一位置的指针
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
								 多维数组使用范围for语句注意事项(C++ 11)
------------------------------------------------------------------------------------------------------
	1.如果要改变数组元素的值，我们需要选用引用类型作为循环控制变量。
	2.要使用范围for语句处理多维数组，除了最内层的循环外，其他所有循环的控制变量都应该是引用类型。
	这样可以避免数组被自动转为指针。
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
										类型别名(C++ 11)
------------------------------------------------------------------------------------------------------
	1.using int_array = int[4];        // 新标准下类型别名的声明
	2.typedef int int_array[4];        // 等价的typedef声明
------------------------------------------------------------------------------------------------------
*/
