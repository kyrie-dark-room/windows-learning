#pragma once

/*
* 引用：
*	  调用Windows函数时，它会先验证我们传给它的参数，然后再开始执行任务。如果传入的参数无效，或者由于其他原因操作无法进行，则函数的返回值将指出函数因为某些原因失败了。
* 
* 常见的Windows函数返回值数据类型
* ――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
*     数据类型    |														指出函数调用失败的值
* ――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
*     VOID		  |	   这个函数不可能失败。只有极少数Windows函数的返回值类型为VOID
* ――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
*     BOOL        |    这个函数失败，返回值为0；否则，返回值是一个非0值。应避免测试返回值是否为TRUE；最稳妥的做法是检查它是否不为FALSE
* ――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
*     HANDLE      |    如果函数失败，则返回值通常为NULL；否则，HANDLE将标识一个可以操纵对象。请注意这种返回值，因为某些函数会返回INVALID_HANDLE_VALUE的一个句柄值，
*				  |	   它被定义为-1。函数的Platform SDK文档清楚说明了函数是返回NULL还是INVALID_HANDLE_VALUE来标识失败。
* ――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
*     PVOID       |    如果函数调用失败，则返回值为NULL；否则，PVOID将标识一个数据块的内存地址
* ――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
*     LONG/DWORD  |    这种类型比较棘手。返回计数的函数通常会返回一个LONG或DWORD。如果函数出于某种原因不能对我们想要计数的东西进行计数，它通常会返回0或-1
*					  （具体取决于函数）。如果要调用一个返回LONG/DWORD的函数，务必仔细阅读Platform SDK文档，确保我们会正确地检查可能出现的错误
* ――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
* 
* Windows错误码
*     Microsoft编辑了一个列表，其中列出了所有可能的错误代码，并为每个错误代码都分配了一个32位的编号。
* 
* Windows错误码实现机制
*     在内部，当Windows函数检测到错误时，它会使用一种名为“线程本地存储区”（thread-local-storage）的机制将相应的错误代码与“主调线程”（或者说发出调用的线程，即
*   calling thread）关联到一起。这种机制使不同的线程能独立运行，不会出现相互干扰对方的错误代码的情况。函数返回时，其返回值会指出已发生一个错误。要查看具体是什么
*   错误，请调用GetLastError函数。
*     DWORD GetLastError()
* Windows错误码定义
*     有了32位错误代码之后，接着需要把它转换为更有用的信息。WinError.h头文件包含了Microsoft定义的的错误代码列表。部分摘录如下
*     // MessageId: ERROR_SUCCESS
*	  //
*     // MessageText:
*     //
*     // The operation completed successfully.
*     //
*     #define ERROR_SUCCESS						0L
*     
*     #define NO_ERROR							0L    // dderror
*	  #define SEC_E_OK							((HRESULT)0x00000000L)
* 
*     // MessageId: ERROR_INVALID_FUNCTION
*	  //
*     // MessageText:
*     //
*     // Incorrect funtion.
*     //
*     #define ERROR_INVALID_FUNCTION			1L
* 
*	  可以看出，每个错误都有三种表示：一个消息ID（一个可在源代码中使用的宏，用于与GetLastError的返回值进行比较）、消息文本（描述错误的英文文本）和一个编号
*  （应该避免使用此编号，尽量使用消息ID）。
*     
*/

class CHYErrorHandler
{
};

